generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                  Int            @id @default(autoincrement())
  email               String         @unique
  username            String         @unique @db.VarChar(255)
  password            String
  rol                 Rol?
  verificado          Boolean        @default(false)
  fecha_creacion      DateTime       @default(now())
  avatar              String?
  ciudad              String?
  pais                String?
  Contacto            Contacto[]
  eventosCreados      Evento[]       @relation("CreadorEventos")
  grupos              GrupoUsuario[]
  inversores          Inversor[]
  mensajes_enviados   Mensaje[]      @relation("enviados")
  mensajes_recibidos  Mensaje[]      @relation("recibidos")
  notificaciones      Notificacion[]
  eventosParticipados Participante[] @relation("ParticipacionesEventos")
  seguidores          Seguimiento[]  @relation("seguidos")
  seguidos            Seguimiento[]  @relation("seguidores")
  startups            Startup[]
  suscriptores        Suscripcion[]  @relation("suscriptores")
  suscritos           Suscripcion[]  @relation("suscritos")
  Grupo               Grupo[]
  stripeCustomerId    String?        @unique // ID de cliente Stripe para métodos de pago
  payment_method_id   String? // ID del PaymentMethod predeterminado
  stripeAccount       stripeAccount?
}

model Inversor {
  id                  Int                  @id @default(autoincrement())
  id_usuario          Int                  @unique
  nombre              String               @db.VarChar(255)
  perfil_inversion    String
  inversiones         Inversion[]
  usuario             Usuario              @relation(fields: [id_usuario], references: [id])
  ofertas             Oferta[]
  portfolio           Portfolio?
  resenas             Resena[]
  portfolio_historico PortfolioHistorico[]
}

model PortfolioHistorico {
  id         Int      @id @default(autoincrement())
  inversorId Int
  valoracion Decimal  @db.Decimal(12, 2)
  fecha      DateTime @default(now())
  inversor   Inversor @relation(fields: [inversorId], references: [id], onDelete: Cascade)
}

model Startup {
  id                    Int                   @id @default(autoincrement())
  id_usuario            Int                   @unique
  nombre                String                @db.VarChar(255)
  sector                String                @db.VarChar(255)
  estado_financiacion   String                @db.VarChar(255)
  plantilla             Int?
  porcentaje_disponible Decimal               @default(100) @db.Decimal(5, 2)
  valoracion            Decimal?              @db.Decimal(12, 2)
  chatbots              Chatbot[]
  inversiones           Inversion[]
  ofertas               Oferta[]
  usuario               Usuario               @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resenas               Resena[]
  valoracion_historica  ValoracionHistorica[]
  Documento             Documento[]
  hitos                 Hito[]
}

model Documento {
  id         Int      @id @default(autoincrement())
  id_startup Int
  nombre     String
  url        String
  tipo       String
  startup    Startup  @relation(fields: [id_startup], references: [id])
  creadoEn   DateTime @default(now())
}

model Hito {
  id             Int   @id @default(autoincrement())
  id_startup     Int
  titulo         String
  fechaObjetivo  DateTime
  estado         EstadoHito
  startup        Startup  @relation(fields: [id_startup], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ValoracionHistorica {
  id         Int      @id @default(autoincrement())
  startupId  Int
  valoracion Decimal  @db.Decimal(12, 2)
  fecha      DateTime @default(now())
  startup    Startup  @relation(fields: [startupId], references: [id], onDelete: Cascade)
}

model Inversion {
  id                   Int            @id @default(autoincrement())
  id_inversor          Int
  id_startup           Int
  monto_invertido      Decimal        @db.Decimal(12, 2)
  porcentaje_adquirido Decimal        @db.Decimal(5, 2)
  fecha                DateTime       @default(now()) @db.Timestamp(6)
  portfolioId          Int?
  valor                Decimal        @default(0) @db.Decimal(12, 2)
  tipo_movimiento      TipoMovimiento @default(inversion)
  Ingreso              Ingreso[]
  inversor             Inversor       @relation(fields: [id_inversor], references: [id])
  startup              Startup        @relation(fields: [id_startup], references: [id])
  Portfolio            Portfolio?     @relation(fields: [portfolioId], references: [id])

  @@unique([id_inversor, id_startup], name: "inversor_startup_unique")
}

model Oferta {
  id                      Int            @id @default(autoincrement())
  id_inversor             Int
  id_startup              Int
  monto_ofrecido          Decimal        @db.Decimal(12, 2)
  porcentaje_ofrecido     Decimal        @db.Decimal(5, 2)
  estado                  String         @db.VarChar(50)
  escrow_id               Int?
  contraoferta_monto      Decimal?       @db.Decimal(12, 2)
  contraoferta_porcentaje Decimal?       @db.Decimal(5, 2)
  fecha_creacion          DateTime       @default(now())
  tipo_movimiento         TipoMovimiento @default(oferta)
  escrow                  Escrow[]
  inversor                Inversor       @relation(fields: [id_inversor], references: [id])
  startup                 Startup        @relation(fields: [id_startup], references: [id])
  termsAccepted           Boolean        @default(false)
  termsAcceptedAt         DateTime? // Fecha en que aceptó
}

model Portfolio {
  id             Int         @id @default(autoincrement())
  id_inversor    Int         @unique
  fecha_creacion DateTime    @default(now())
  valor_total    Decimal     @default(0) @db.Decimal(12, 2)
  inversiones    Inversion[]
  inversor       Inversor    @relation(fields: [id_inversor], references: [id])
}

model Escrow {
  id                    Int      @id @default(autoincrement())
  id_oferta             Int
  monto                 Decimal  @db.Decimal(12, 2)
  estado                String   @db.VarChar(50)
  fecha_creacion        DateTime @default(now())
  stripePaymentIntentId String? // Guarda el PaymentIntent para capturar/cancelar
  oferta                Oferta   @relation(fields: [id_oferta], references: [id], onDelete: Cascade)
}

model Ingreso {
  id           Int       @id @default(autoincrement())
  id_inversion Int
  monto        Decimal   @db.Decimal(12, 2)
  fecha        DateTime  @default(now())
  inversion    Inversion @relation(fields: [id_inversion], references: [id])
}

model stripeAccount {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  stripeAccountId String   @unique
  accountStatus   Status // Aquí puedes almacenar el estado de la cuenta como 'pending', 'active', etc.
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relación con el usuario
  usuario Usuario @relation(fields: [userId], references: [id])
}

model Suscripcion {
  id               Int               @id @default(autoincrement())
  id_suscriptor    Int
  id_suscrito      Int
  fecha_inicio     DateTime          @default(now())
  fecha_expiracion DateTime // Fecha de expiración de la suscripción
  estado           EstadoSuscripcion @default(ACTIVA) // Estado de la suscripción
  auto_renovacion  Boolean           @default(false) // Si la suscripción se renueva automáticamente
  metodo_pago      MetodoPago // Método de pago utilizado
  suscriptor       Usuario           @relation("suscriptores", fields: [id_suscriptor], references: [id])
  suscrito         Usuario           @relation("suscritos", fields: [id_suscrito], references: [id])
}

model Seguimiento {
  id           Int      @id @default(autoincrement())
  id_seguidor  Int
  id_seguido   Int
  fecha_inicio DateTime @default(now())
  seguido      Usuario  @relation("seguidos", fields: [id_seguido], references: [id], onDelete: Cascade)
  seguidor     Usuario  @relation("seguidores", fields: [id_seguidor], references: [id], onDelete: Cascade)

  @@unique([id_seguidor, id_seguido])
}

model Notificacion {
  id             Int              @id @default(autoincrement())
  id_usuario     Int
  contenido      String           @db.VarChar(255)
  tipo           TipoNotificacion @default(evento)
  leido          Boolean          @default(false)
  fecha_creacion DateTime         @default(now())
  usuario        Usuario          @relation(fields: [id_usuario], references: [id])
}

model Mensaje {
  id          Int      @id @default(autoincrement())
  contenido   String
  id_emisor   Int
  id_receptor Int
  fecha_envio DateTime @default(now())
  id_grupo    Int?
  emisor      Usuario  @relation("enviados", fields: [id_emisor], references: [id])
  grupo       Grupo?   @relation(fields: [id_grupo], references: [id])
  receptor    Usuario  @relation("recibidos", fields: [id_receptor], references: [id])
}

model Grupo {
  id                   Int                    @id @default(autoincrement())
  nombre               String                 @db.VarChar(255)
  descripcion          String                 @db.VarChar(255)
  tipo                 Tipo                   @default(publico)
  fecha_creacion       DateTime               @default(now())
  foto_grupo           String?
  id_usuario           Int
  creador              Usuario                @relation(fields: [id_usuario], references: [id]) // Relación con Usuario
  usuarios             GrupoUsuario[]
  mensajes             Mensaje[]
  ConfiguracionPermiso ConfiguracionPermiso[]
}

model GrupoUsuario {
  id         Int      @id @default(autoincrement())
  id_grupo   Int
  id_usuario Int
  rol        RolGrupo @default(miembro)

  grupo   Grupo   @relation(fields: [id_grupo], references: [id])
  usuario Usuario @relation(fields: [id_usuario], references: [id])

  @@unique([id_grupo, id_usuario])
}

model ConfiguracionPermiso {
  id       Int     @id @default(autoincrement())
  id_grupo Int
  permiso  Permiso
  abierto  Boolean @default(false)

  grupo Grupo @relation(fields: [id_grupo], references: [id])

  @@unique([id_grupo, permiso])
}

model Evento {
  id              Int            @id @default(autoincrement())
  id_usuario      Int
  descripcion     String         @db.VarChar(255)
  fecha_evento    DateTime       @default(now())
  tipo_movimiento TipoMovimiento @default(evento)
  titulo          String         @db.VarChar(255)
  tipo            Tipo
  fecha_creacion  DateTime       @default(now())
  creador         Usuario        @relation("CreadorEventos", fields: [id_usuario], references: [id])
  participantes   Participante[]
}

model Participante {
  id          Int      @id @default(autoincrement())
  id_evento   Int
  id_usuario  Int
  fecha_union DateTime @default(now())
  evento      Evento   @relation(fields: [id_evento], references: [id], onDelete: Cascade) // onDelete aquí
  usuario     Usuario  @relation("ParticipacionesEventos", fields: [id_usuario], references: [id])

  @@unique([id_evento, id_usuario])
}

model Chatbot {
  id            Int     @id @default(autoincrement())
  id_startup    Int
  nombre        String  @db.VarChar(255)
  configuracion Json
  startup       Startup @relation(fields: [id_startup], references: [id], onDelete: Cascade)
}

model Contacto {
  id         Int     @id @default(autoincrement())
  id_usuario Int     @unique
  correo     String?
  twitter    String?
  linkedin   String?
  facebook   String?
  instagram  String?
  otros      String?
  usuario    Usuario @relation(fields: [id_usuario], references: [id])
}

model Resena {
  id          Int      @id @default(autoincrement())
  id_inversor Int
  id_startup  Int
  puntuacion  Decimal  @default(0) @db.Decimal(12, 2)
  comentario  String?
  fecha       DateTime @default(now())
  inversor    Inversor @relation(fields: [id_inversor], references: [id])
  startup     Startup  @relation(fields: [id_startup], references: [id])

  @@map("reseñas")
}

model WaitlistUser {
  id                  Int      @id @default(autoincrement())
  correo              String   @unique
  nombre              String? // Nombre del usuario (opcional)
  tipo_usuario        String   @db.VarChar(50) // Tipo de usuario: 'startup' o 'investor'
  fecha_creacion      DateTime @default(now()) // Fecha de creación
  fecha_actualizacion DateTime @updatedAt // Fecha de última actualización
}

enum Status {
  pending // Usuario inició pero no terminó el onboarding
  under_review // Stripe está revisando los datos enviados
  active // Cuenta completamente activa (charges + payouts)
  restricted // Cuenta limitada por Stripe
  rejected // Cuenta rechazada por Stripe
  closed // Cuenta cerrada manualmente o por Stripe
}

enum TipoMovimiento {
  evento
  inversion
  oferta
}

enum TipoNotificacion {
  evento
  inversion
  oferta
  contraoferta
  grupo
  reseña
  seguimiento
}

enum Tipo {
  privado
  publico
}

enum RolGrupo {
  miembro
  administrador
}

enum Rol {
  inversor
  startup
}

enum EstadoSuscripcion {
  ACTIVA
  CANCELADA
  PENDIENTE
  EXPIRADA
}

enum MetodoPago {
  TARJETA
  PAYPAL
  OTRO
}

enum Permiso {
  editar_grupo
  eliminar_grupo
  gestionar_roles
  ver_estadisticas
  invitar_miembros
  expulsar_miembros
  crear_ofertas
  subir_documentos
  eliminar_documentos
}

enum EstadoHito {
  cumplido
  fallado
  actual
  futuro
}