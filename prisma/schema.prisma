datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id                 Int            @id @default(autoincrement())
  email              String         @unique
  password           String
  rol                Rol?           // Relación opcional con el rol de inversor o startup
  inversores         Inversor[]     // Relación inversores
  startups           Startup[]      // Relación startups
  fecha_creacion     DateTime       @default(now())
  seguidores         Seguimiento[]  @relation("seguidores")
  seguidos           Seguimiento[]  @relation("seguidos")
  suscriptores       Suscripcion[]  @relation("suscriptores")
  suscritos          Suscripcion[]  @relation("suscritos")
  notificaciones     Notificacion[] 
  mensajes_enviados  Mensaje[]      @relation("enviados")
  mensajes_recibidos Mensaje[]      @relation("recibidos")
  verificado         Boolean        @default(false)
  grupos             Grupo[]        @relation("GrupoUsuarios") // Eliminamos "references: [id]"
  eventos            Evento[]       // Relación con los eventos
  avatar             String?        // URL de la foto de perfil
}

model Inversor {
  id               Int         @id @default(autoincrement())
  id_usuario       Int
  nombre           String      @db.VarChar(255)
  username         String      @unique @db.VarChar(255)
  perfil_inversion String
  inversiones      Inversion[] // Relación con inversiones realizadas
  usuario          Usuario     @relation(fields: [id_usuario], references: [id])
  portfolio        Portfolio?  // Relación con portafolio
  ofertas          Oferta[]    // Relación con ofertas hechas
  eventos          Evento[]    // Relación con eventos asociados
}

model Startup {
  id                    Int         @id @default(autoincrement())
  id_usuario            Int
  nombre                String      @db.VarChar(255)
  username              String      @unique @db.VarChar(255)
  sector                String      @db.VarChar(255)
  estado_financiacion   String      @db.VarChar(255)
  plantilla             Int?
  porcentaje_disponible Decimal     @default(100) @db.Decimal(5, 2)
  valoracion            Decimal?    @db.Decimal(12, 2)
  inversiones           Inversion[] // Relación con las inversiones
  ofertas               Oferta[]    // Relación con las ofertas recibidas
  usuario               Usuario     @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction)
  chatbots              Chatbot[]   // Relación con los chatbots
  eventos               Evento[]    // Relación con eventos asociados
}

model Inversion {
  id                   Int        @id @default(autoincrement())
  id_inversor          Int
  id_startup           Int
  monto_invertido      Decimal    @db.Decimal(12, 2)
  valor                Decimal    @db.Decimal(12, 2) @default(0)
  porcentaje_adquirido Decimal    @db.Decimal(5, 2)
  fecha                DateTime   @default(now()) @db.Timestamp(6)
  inversor             Inversor   @relation(fields: [id_inversor], references: [id])
  startup              Startup    @relation(fields: [id_startup], references: [id])
  Portfolio            Portfolio? @relation(fields: [portfolioId], references: [id])
  portfolioId          Int?
  Ingreso              Ingreso[]  // Relación con ingresos generados por la inversión
}

model Oferta {
  id                      Int       @id @default(autoincrement())
  id_inversor             Int
  id_startup              Int
  monto_ofrecido          Decimal   @db.Decimal(12, 2)
  porcentaje_ofrecido     Decimal   @db.Decimal(5, 2)
  estado                  String    @db.VarChar(50)
  escrow_id               Int?
  contraoferta_monto      Decimal?  @db.Decimal(12, 2)
  contraoferta_porcentaje Decimal?  @db.Decimal(5, 2)
  fecha_creacion          DateTime  @default(now())
  inversor                Inversor  @relation(fields: [id_inversor], references: [id])
  startup                 Startup   @relation(fields: [id_startup], references: [id])
  escrow                  Escrow[]  // Relación con escrow
}

model Portfolio {
  id             Int         @id @default(autoincrement())
  id_inversor    Int         @unique
  inversor       Inversor    @relation(fields: [id_inversor], references: [id])
  fecha_creacion DateTime    @default(now())
  inversiones    Inversion[]
  valor_total    Decimal     @default(0) @db.Decimal(12, 2)
}

model Escrow {
  id             Int      @id @default(autoincrement())
  id_oferta      Int
  monto          Decimal  @db.Decimal(12, 2)
  estado         String   @db.VarChar(50)
  fecha_creacion DateTime @default(now())
  oferta         Oferta   @relation(fields: [id_oferta], references: [id], onDelete: Cascade)
}

model Ingreso {
  id           Int       @id @default(autoincrement())
  id_inversion Int
  monto        Decimal   @db.Decimal(12, 2)
  fecha        DateTime  @default(now())
  inversion    Inversion @relation(fields: [id_inversion], references: [id])
}

model Suscripcion {
  id              Int      @id @default(autoincrement())
  id_suscriptor   Int
  id_suscrito     Int
  fecha_inicio    DateTime @default(now())
  auto_renovacion Boolean  @default(false)
  suscriptor      Usuario  @relation("suscriptores", fields: [id_suscriptor], references: [id])
  suscrito        Usuario  @relation("suscritos", fields: [id_suscrito], references: [id])
}

model Seguimiento {
  id           Int      @id @default(autoincrement())
  id_seguidor  Int
  id_seguido   Int
  fecha_inicio DateTime @default(now())
  seguidor     Usuario  @relation("seguidores", fields: [id_seguidor], references: [id])
  seguido      Usuario  @relation("seguidos", fields: [id_seguido], references: [id])
}

model Notificacion {
  id             Int      @id @default(autoincrement())
  id_usuario     Int
  contenido      String   @db.VarChar(255)
  leido          Boolean  @default(false)
  fecha_creacion DateTime @default(now())
  usuario        Usuario  @relation(fields: [id_usuario], references: [id])
}

model Mensaje {
  id          Int      @id @default(autoincrement())
  contenido   String   @db.Text
  id_emisor   Int
  id_receptor Int
  id_grupo    Int?
  fecha_envio DateTime @default(now())
  emisor      Usuario  @relation("enviados", fields: [id_emisor], references: [id])
  receptor    Usuario  @relation("recibidos", fields: [id_receptor], references: [id])
  grupo       Grupo?   @relation(fields: [id_grupo], references: [id])
}

model Grupo {
  id             Int        @id @default(autoincrement())
  id_usuario     Int        
  nombre         String     @db.VarChar(255)
  descripcion    String     @db.VarChar(255)
  tipo           Tipo       @default(publico)
  fecha_creacion DateTime   @default(now())
  usuarios       Usuario[]  @relation("GrupoUsuarios") // Eliminamos "references: [id]"
  mensajes       Mensaje[]  // Relación con mensajes enviados
  foto_grupo     String?
}

model Evento {
  id             Int        @id @default(autoincrement())
  id_usuario     Int?
  id_inversor    Int?
  id_startup     Int?
  tipo_evento    String     @db.VarChar(255)
  descripcion    String     @db.VarChar(255)
  fecha_evento   DateTime   @default(now())
  usuario        Usuario?   @relation(fields: [id_usuario], references: [id])
  inversor       Inversor?  @relation(fields: [id_inversor], references: [id])
  startup        Startup?   @relation(fields: [id_startup], references: [id])
}

model Chatbot {
  id          Int      @id @default(autoincrement())
  id_startup  Int      // Relación con startups
  nombre      String   @db.VarChar(255)
  configuracion Json    // Configuración específica del chatbot
  startup     Startup  @relation(fields: [id_startup], references: [id], onDelete: Cascade)
}

enum Tipo{
  privado
  publico
}

enum Rol {
  inversor
  startup
}
